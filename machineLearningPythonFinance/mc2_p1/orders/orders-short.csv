Date,Symbol,Order,Shares
2011-01-05,AAPL,BUY,1500
2011-01-20,AAPL,SELL,1500

My approach worked a bit differently than calling argsort explicitly.  Combine your distances and y_mappings into a single array.  Name the columns explicitly.  You can then run in place sort on the array and sort by column.  ex. array.sort(axis-0, order='distances')

0.03863975053427489, 0.05107367851053289, 0.0847512398624231  is what I saw.
                                                                                                                                                              
 https://piazza.com/class/idadrtx18nie1?cid=938

https://piazza.com/class/idadrtx18nie1?cid=947

For k=100, I am getting
In sample results
RMSE: 0.733283292748
corr: -0.211047641448
Out of sample results
RMSE: 0.724711114597
corr: -0.200860071552

In sample results
RMSE: 0.136590187312
corr: 0.981360326901
Out of sample results
RMSE: 0.207762150054
corr: 0.955537498166

In sample results
RMSE: 0.122580188729
corr: 0.986389423738
Out of sample results
RMSE: 0.191223728243
corr: 0.964707834855


In sample results
RMSE: 0.127630439975
corr: 0.985002012636
Out of sample results
RMSE: 0.197430176122
corr: 0.962032967999

BagLearner.py
KNNLearner.py
best4linreg.py
best4KNN.py
report.pdf

Your code as KNNLearner.py, BagLearner.py, best4linreg.py, best4KNN.py
Your report as report.pdf


1 3 
2 4
3 5
4 6
5 7
6 9
7 15
8 20
9 22



    finalData = np.column_stack( (testX,testY) )
    fig = plt.figure()
    ax = fig.add_subplot(1, 1, 1)
    N = 100
    data = finalData
    print data

    x = data[:,0]
    y = data[:,1]

    print x
    print y

    points = data[:,2:4]
    # color is the length of each vector in `points`
    color = np.sqrt((points**2).sum(axis = 1))/np.sqrt(2.0)
    rgb = plt.get_cmap('jet')(color)
    ax.scatter(x, y, color = rgb)
    plt.show()
 